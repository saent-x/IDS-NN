package core

import (
	"fmt"
	"github.com/samber/lo"
	"gonum.org/v1/gonum/mat"
	"gonum.org/v1/plot"
	"gonum.org/v1/plot/plotter"
	"gonum.org/v1/plot/vg"
	"image/color"
	"log"
	"math"
	"math/rand"
)

func linspace(start, stop float64, num int) []float64 {
	arr := make([]float64, num)
	step := (stop - start) / float64(num-1)
	for i := 0; i < num; i++ {
		arr[i] = start + step*float64(i)
	}
	return arr
}

func VerticalData(samples, classes int) (*mat.Dense, *mat.Dense) {
	X := mat.NewDense(samples*classes, 2, nil)
	y := make([]float64, samples*classes)

	for _, class_number := range lo.Range(classes) {
		ix := lo.RangeWithSteps(samples*class_number, samples*(class_number+1), 1)

		lo.ForEach(ix, func(item int, index int) {
			X.Set(item, 0, rand.NormFloat64()*0.1+float64(class_number)/3)
			X.Set(item, 1, rand.NormFloat64()*0.1+0.5)
			y[item] = float64(class_number)
		})
	}
	return X, mat.NewDense(1, len(y), y)
}

func SpiralData(samples, classes int) (*mat.Dense, *mat.Dense) {
	X := mat.NewDense(samples*classes, 2, nil)
	y := make([]float64, samples*classes)

	for classNumber := 0; classNumber < classes; classNumber++ {
		ixStart := samples * classNumber
		ixEnd := samples * (classNumber + 1)

		r := linspace(0.0, 1.0, samples)
		t := linspace(float64(classNumber*4), float64((classNumber+1)*4), samples)
		for i := range t {
			t[i] += rand.NormFloat64() * 0.2 // Adding Gaussian noise
		}

		for i := ixStart; i < ixEnd; i++ {
			rIndex := i - ixStart
			X.Set(i, 0, r[rIndex]*math.Sin(t[rIndex]*2.5))
			X.Set(i, 1, r[rIndex]*math.Cos(t[rIndex]*2.5))
			y[i] = float64(classNumber)
		}
	}

	return X, mat.NewDense(1, len(y), y)
}

func PlotScatter(X *mat.Dense, samples, classes int, filepath string) bool {
	p := plot.New()

	p.Title.Text = fmt.Sprintf("%v Data", lo.PascalCase(filepath))
	p.X.Label.Text = "X"
	p.Y.Label.Text = "Y"
	p.Add(plotter.NewGrid())

	// Define different colors for different classes
	colors := []color.RGBA{
		{R: 255, G: 0, B: 0, A: 255},   // Red
		{R: 0, G: 255, B: 0, A: 255},   // Green
		{R: 0, G: 0, B: 255, A: 255},   // Blue
		{R: 255, G: 255, B: 0, A: 255}, // Yellow
		{R: 255, G: 0, B: 255, A: 255}, // Magenta
	}

	for classNumber := 0; classNumber < classes; classNumber++ {
		pts := make(plotter.XYs, samples)
		for i := 0; i < samples; i++ {
			index := classNumber*samples + i
			pts[i].X = X.At(index, 0) // since Y has two features/ columns
			pts[i].Y = X.At(index, 1)

		}

		s, err := plotter.NewScatter(pts)
		if err != nil {
			log.Fatalf("could not create scatter plot: %v", err)
		}
		s.GlyphStyle.Color = colors[classNumber%len(colors)]
		s.GlyphStyle.Radius = vg.Points(3)

		p.Add(s)
	}

	// Save the plot to a PNG file
	if err := p.Save(8*vg.Inch, 8*vg.Inch, fmt.Sprintf("%s.png", filepath)); err != nil {
		log.Fatalf("could not save plot: %v", err)

		return false
	} else {
		return true
	}
}

func PlotLine(x []float64, y []float64) *plot.Plot {
	p := plot.New()

	p.X.Label.Text = "X"
	p.Y.Label.Text = "Y"
	p.Add(plotter.NewGrid())

	XY_pts := make(plotter.XYs, len(x))

	for i := 0; i < len(XY_pts); i++ {
		XY_pts[i].X = x[i]
		XY_pts[i].Y = y[i]
	}

	s, err := plotter.NewLine(XY_pts)
	if err != nil {
		log.Fatalf("could not create line plot: %v", err)
	}
	s.Color = color.RGBA{R: 255, G: 0, B: 0, A: 255} //red
	p.Add(s)

	return p
}

func SavePlot(p *plot.Plot, filepath string) bool {
	p.Title.Text = fmt.Sprintf("%v Data", lo.PascalCase(filepath))

	// Save the plot to a PNG file
	if err := p.Save(8*vg.Inch, 8*vg.Inch, fmt.Sprintf("%s.png", filepath)); err != nil {
		log.Fatalf("could not save plot: %v", err)

		return false
	} else {
		return true
	}
}

func SparseToOHE(data *mat.Dense, n int) *mat.Dense {
	// Create a zero matrix of size n x n
	eyeMatrix := mat.NewDense(n, n, nil)
	outputMatrix := mat.NewDense(n, n, nil)

	// Set the diagonal elements to 1
	for i := 0; i < n; i++ {
		eyeMatrix.Set(i, i, 1)
	}

	lo.ForEach(lo.Range(n), func(item int, index int) {
		values := data.RawMatrix().Data
		outputMatrix.SetRow(index, eyeMatrix.RawRowView(int(values[index])))
	})

	return outputMatrix
}

func FirstN(dense *mat.Dense, n int) *mat.Dense {
	if n > dense.RawMatrix().Rows {
		panic("invalid operation!")
	}
	new_dense := mat.NewDense(n, dense.RawMatrix().Cols, nil)

	for i := 0; i < n; i++ {
		new_dense.SetRow(i, dense.RawRowView(i))
	}

	return new_dense
}

func Fill_n(value float64, n int) []float64 {
	nArr := make([]float64, n)

	for i := 0; i < n; i++ {
		nArr[i] = value
	}

	return nArr
}

func MockTestData() (*mat.Dense, *mat.Dense) {
	X := mat.NewDense(300, 2, []float64{0.0, 0.0, 0.0029955569189041853, 0.00964660756289959, 0.012880969792604446, 0.015562848187983036, 0.029974790289998055, 0.004448096267879009, 0.0393124595284462, 0.009328283369541168, 0.0008288290700875223, 0.050498250871896744, 0.0534835159778595, 0.028506282716989517, 0.04173619672656059, 0.05707521364092827, 0.05546339228749275, 0.058768682181835175, 0.08160383254289627, 0.04006590694189072, 0.08918751031160355, 0.047419704496860504, 0.10716083645820618, -0.02936382405459881, 0.12118320167064667, -0.0026475144550204277, 0.12877772748470306, 0.02567947469651699, 0.14111296832561493, -0.00922449491918087, 0.15057946741580963, -0.016812633723020554, 0.11347636580467224, -0.11507779359817505, 0.17155250906944275, -0.007518164813518524, 0.16718684136867523, -0.07145914435386658, 0.19132587313652039, 0.015079323202371597, 0.13677190244197845, 0.14867955446243286, 0.13560642302036285, -0.16311439871788025, 0.1040247455239296, -0.19637098908424377, 0.2156335413455963, -0.08646537363529205, -0.09830333292484283, -0.22159866988658905, 0.24603141844272614, -0.05689945071935654, 0.12416625022888184, -0.23142017424106598, 0.13264194130897522, -0.23829872906208038, -0.12380430102348328, -0.254291832447052, -0.14615526795387268, -0.253862589597702, 0.010245291516184807, -0.30285707116127014, -0.05569057539105415, -0.30813923478126526, 0.11179529130458832, -0.30328360199928284, 0.23880670964717865, -0.23255637288093567, -0.04070228710770607, -0.3410138785839081, -0.1607210487127304, -0.31489044427871704, -0.32569506764411926, -0.1617223471403122, -0.3479260504245758, -0.1364811211824417, -0.1850746124982834, -0.336272656917572, -0.2373548150062561, -0.3144056797027588, -0.14781402051448822, -0.37603145837783813, -0.11835025995969772, -0.3968706727027893, -0.10401209443807602, -0.41129443049430847, -0.35689398646354675, 0.24754977226257324, -0.3850840926170349, -0.22190339863300323, -0.4211059510707855, -0.17111791670322418, -0.35766899585723877, -0.29659605026245117, -0.4327418804168701, 0.1952424794435501, -0.3797777593135834, -0.30140820145606995, -0.49072572588920593, 0.06452345848083496, -0.5020192265510559, -0.05525142699480057, -0.41547295451164246, 0.30457067489624023, -0.5041040182113647, 0.14754442870616913, -0.5346620678901672, 0.027200432494282722, -0.4071617126464844, 0.3629600405693054, -0.2728874087333679, 0.4839157462120056, -0.3162872791290283, 0.46896663308143616, -0.2105485498905182, 0.5358787775039673, -0.3957984149456024, 0.43194201588630676, -0.2883087992668152, 0.521580159664154, -0.32131946086883545, 0.5138708353042603, -0.1828801929950714, 0.5883960723876953, -0.25943702459335327, 0.5699976086616516, -0.4487569034099579, 0.4511938691139221, 0.17254099249839783, 0.6230137348175049, 0.053503748029470444, 0.6543819904327393, -0.2788938581943512, 0.6055267453193665, 0.44415152072906494, 0.5106309056282043, 0.09030307084321976, 0.6809067130088806, 0.4556201100349426, 0.5274249315261841, 0.6459842920303345, 0.28749483823776245, 0.5846171379089355, 0.41540107131004333, 0.7272241711616516, 0.00840271171182394, 0.33600854873657227, 0.6563674807548523, 0.7356560826301575, 0.13239562511444092, 0.6162975430488586, 0.44056597352027893, 0.6280736327171326, 0.44141942262649536, 0.7263660430908203, 0.2780839502811432, 0.7811311483383179, 0.10289375483989716, 0.7885484099388123, -0.12232409417629242, 0.757483720779419, 0.2814481258392334, 0.5826627016067505, -0.5743915438652039, 0.6534839868545532, -0.5089313387870789, 0.8146985769271851, 0.19787292182445526, 0.16507667303085327, -0.8322717547416687, -0.09342218190431595, -0.8534881472587585, 0.12854312360286713, -0.859123706817627, 0.5839788913726807, -0.6566862463951111, 0.7802731990814209, -0.42579007148742676, -0.08290096372365952, -0.8951593637466431, 0.4638494849205017, -0.7818503379821777, -0.3395498991012573, -0.8541777729988098, 0.02574850432574749, -0.9289361238479614, -0.4149204194545746, -0.8427941799163818, -0.23339489102363586, -0.9203627109527588, -0.4805203378200531, -0.8306170105934143, -0.2655962407588959, -0.9326150417327881, -0.9346775412559509, -0.29390808939933777, -0.5069613456726074, -0.8502295017242432, -0.7005848288536072, -0.713569164276123, -0.0, -0.0, -2.376367774559185e-05, -0.010100982151925564, -0.002859049942344427, -0.019998686388134956, -0.029650840908288956, -0.006253101862967014, -0.015462019480764866, -0.03732844069600105, -0.044767674058675766, 0.02337980829179287, -0.05014582723379135, -0.03403661027550697, -0.0557611808180809, -0.04347620904445648, -0.057788774371147156, 0.05648365616798401, -0.07216310501098633, 0.05528968572616577, -0.05889495089650154, 0.08206354081630707, -0.093630850315094, 0.059824272990226746, -0.118445485830307, -0.02574966661632061, -0.038580670952796936, 0.1255176067352295, -0.13572698831558228, 0.03970066085457802, -0.09169381111860275, 0.12061958760023117, -0.07414070516824722, 0.14360688626766205, -0.13731279969215393, 0.10311151295900345, -0.07763251662254333, 0.16441120207309723, -0.03550570458173752, 0.18860626220703125, -0.07077987492084503, 0.18921515345573425, -0.17790226638317108, 0.11552572250366211, -0.043065618723630905, 0.2180093377828598, 0.09474381804466248, 0.21212659776210785, -0.11396535485982895, 0.21396590769290924, -0.02921106666326523, 0.2508300542831421, -0.04124075546860695, 0.25936800241470337, 0.24124161899089813, 0.12721101939678192, 0.1592436134815216, 0.23373769223690033, 0.15724778175354004, 0.24714511632919312, 0.023906756192445755, 0.3020857870578766, 0.2320321500301361, 0.21026721596717834, 0.10436996072530746, 0.3059183657169342, 0.23510749638080597, 0.23629552125930786, 0.1795233190059662, 0.29277727007865906, 0.3413239121437073, 0.09211532026529312, 0.3554563820362091, 0.0766952782869339, 0.32727643847465515, 0.18047095835208893, 0.38189080357551575, 0.03861768916249275, 0.28976595401763916, 0.2668781280517578, 0.2689616084098816, 0.3015100359916687, 0.40380004048347473, -0.09197083860635757, 0.41672009229660034, -0.07953614741563797, 0.3761124014854431, -0.2172410637140274, 0.031948577612638474, -0.4432946443557739, 0.28942936658859253, -0.350488543510437, 0.4639967978000641, -0.024562105536460876, 0.18574097752571106, -0.4369044005870819, 0.4841582775115967, -0.025861280038952827, 0.4135897159576416, -0.271879643201828, 0.3220980763435364, -0.38901007175445557, -0.15234753489494324, -0.4921090602874756, 0.3868250250816345, -0.3553260862827301, 0.3717731535434723, -0.3852117955684662, 0.16257008910179138, -0.520664632320404, 0.25858524441719055, -0.49170687794685364, -0.2770881652832031, -0.4931424558162689, 0.27114585041999817, -0.5079140663146973, 0.24055340886116028, -0.534195065498352, -0.01949790120124817, -0.5956405401229858, -0.06269163638353348, -0.6028094291687012, -0.6090221405029297, -0.09352616965770721, -0.536692202091217, -0.3227481544017792, -0.4096883237361908, -0.48694369196891785, -0.09274741262197495, -0.639776885509491, -0.6289767622947693, -0.18832612037658691, -0.2951262593269348, -0.5977833867073059, -0.19178970158100128, -0.6490232348442078, -0.6752814054489136, 0.1256328523159027, -0.6890817880630493, -0.10456134378910065, -0.6846718788146973, 0.17655998468399048, -0.7161902785301208, 0.037506308406591415, -0.6633561253547668, 0.2981346845626831, -0.7178660035133362, -0.1684887409210205, -0.709262490272522, -0.23593470454216003, -0.6086443066596985, 0.45107996463775635, -0.767671525478363, -0.002837903331965208, -0.76854407787323, 0.11949186772108078, -0.7339145541191101, 0.2865700125694275, -0.6052729487419128, 0.5200157761573792, -0.6552993655204773, 0.4728396534919739, -0.7992424368858337, 0.1750229299068451, -0.6428716778755188, 0.5222723484039307, -0.8383654356002808, -0.00555246090516448, -0.044179026037454605, 0.8473339080810547, -0.7509674429893494, 0.4161941111087799, -0.5694468021392822, 0.6560085415840149, -0.0312734916806221, 0.8782312273979187, -0.28841540217399597, 0.8407972455024719, 0.71077561378479, 0.5504369735717773, -0.3582617938518524, 0.8355206847190857, 0.42110809683799744, 0.8170567750930786, 0.3820929229259491, 0.8471070528030396, -0.03724965453147888, 0.9386551380157471, 0.7478968501091003, 0.5849708914756775, 0.5888223052024841, 0.7577022314071655, 0.9149960279464722, 0.32108327746391296, 0.958145797252655, 0.20484302937984467, 0.838562548160553, -0.5260350704193115, 0.9694269895553589, -0.24538004398345947, 0.0, 0.0, 0.00914306752383709, 0.004293567966669798, 0.01910214126110077, -0.006574941333383322, 0.029635341838002205, -0.006326151546090841, 0.0385543592274189, -0.012085025198757648, 0.037843842059373856, 0.033445533365011215, 0.05969568341970444, -0.010465179570019245, 0.0704677626490593, 0.005812412593513727, 0.06981592625379562, -0.04069007188081741, 0.08226317912340164, -0.03869408741593361, 0.05071129649877548, -0.08735791593790054, 0.07338420301675797, -0.0834292396903038, 0.04561929404735565, -0.1122998595237732, 0.10377100110054016, -0.08046562969684601, 0.12261171638965607, -0.07045798003673553, 0.09539201855659485, -0.11771662533283234, 0.06047125533223152, -0.1498766541481018, 0.014475897885859013, -0.17110592126846313, -0.14859771728515625, -0.10476911813020706, 0.017839055508375168, -0.19108831882476807, 0.08767514675855637, -0.18200337886810303, 0.009103004820644855, -0.21192580461502075, 0.00016096577746793628, -0.22222216427326202, -0.12592101097106934, -0.19523827731609344, 0.08022905886173248, -0.2287636548280716, -0.13536272943019867, -0.2131805270910263, -0.17185835540294647, -0.19858816266059875, -0.20529279112815857, -0.1795411854982376, -0.14504237473011017, -0.2428055703639984, -0.2140107899904251, -0.20001739263534546, -0.0973699614405632, -0.2869607210159302, -0.24401472508907318, -0.19623464345932007, -0.2665829360485077, -0.1827913522720337, -0.33326271176338196, -0.006861693225800991, -0.26140934228897095, -0.22273820638656616, -0.33037084341049194, 0.12586641311645508, -0.24763847887516022, 0.26628291606903076, -0.2439638376235962, -0.28312766551971436, -0.3387511670589447, 0.18049806356430054, -0.2972276210784912, 0.2585420608520508, -0.39889639616012573, 0.06426753103733063, -0.3844703435897827, 0.15393397212028503, -0.34674501419067383, 0.24443718791007996, -0.3502964973449707, 0.25680068135261536, -0.3317827880382538, 0.29572123289108276, -0.44974201917648315, 0.06590674072504044, 0.04171048477292061, 0.4627705514431, 0.07307709753513336, 0.46908944845199585, -0.30897489190101624, 0.37364763021469116, -0.39271822571754456, 0.3012430965900421, 0.08957227319478989, 0.49704408645629883, -0.1369701772928238, 0.49660876393318176, 0.09959090501070023, 0.5157245993614197, 0.03270573914051056, 0.5343535542488098, 0.33768126368522644, 0.4283596873283386, 0.3868171274662018, 0.3987661898136139, 0.09069214761257172, 0.5583388805389404, -0.03845929354429245, 0.574471652507782, -0.03841913864016533, 0.5845975279808044, 0.5395118594169617, 0.25316953659057617, 0.19835814833641052, 0.5726809501647949, 0.43134361505508423, 0.43999752402305603, 0.46286848187446594, 0.4218502640724182, 0.5941728353500366, 0.2278537154197693, 0.23000933229923248, 0.6041624546051025, 0.65594482421875, 0.028546148911118507, 0.6498516201972961, -0.14878606796264648, 0.6727989912033081, -0.07318456470966339, 0.686836302280426, -0.006666793953627348, 0.6627066135406494, -0.21583957970142365, 0.5965421795845032, -0.3795871436595917, 0.4355508089065552, 0.5697637796401978, 0.01719869114458561, -0.7270693182945251, 0.4781518578529358, -0.5613295435905457, 0.6746768951416016, -0.3217601776123047, 0.5906184315681458, -0.474437415599823, 0.2637360394001007, -0.7209513783454895, 0.4095856845378876, -0.6611942648887634, 0.7778269648551941, -0.1254519373178482, -0.5367175936698914, -0.590513288974762, 0.19897966086864471, -0.783199667930603, -0.33180633187294006, -0.7478810548782349, 0.2742924690246582, -0.7815472483634949, -0.644940972328186, -0.5356665253639221, -0.2938798666000366, -0.7959655523300171, -0.49603205919265747, -0.700800895690918, 0.09544232487678528, -0.8634278178215027, -0.7906591892242432, -0.3835703134536743, -0.7278969883918762, -0.510185718536377, -0.8802923560142517, -0.18239574134349823, -0.43785956501960754, -0.7966964840888977, -0.575886070728302, -0.7164279818534851, -0.7671058177947998, 0.5245321989059448, -0.5223280191421509, -0.7807908654212952, -0.8676859736442566, -0.385566771030426, -0.9111010432243347, 0.3011963963508606, -0.9649202227592468, -0.09613083302974701, -0.9506984353065491, 0.23701588809490204, -0.9793868064880371, -0.1438799649477005, -0.9427887797355652, 0.3333906829357147})
	y := mat.NewDense(1, 300, []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2})

	return X, y
}
