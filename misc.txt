
using IDS_NN.pkg;

Console.WriteLine("info: loading training data...");
#region load training Data
List<DataFrame> training_data = [
    new DataFrame
    {
        Inputs = new List<double>() {0, 0},
        Targets = new List<double>() {0}
    },
    new DataFrame
    {
        Inputs = new List<double>() {0, 1},
        Targets = new List<double>() {1}
    },
    new DataFrame
    {
        Inputs = new List<double>() {1, 0},
        Targets = new List<double>() {1}
    },
    new DataFrame
    {
        Inputs = new List<double>() {0, 0},
        Targets = new List<double>() {0}
    }
];
#endregion

Console.WriteLine("info: generating neural network");
#region generate NN
var nn = new NN(2, 1, 2);
nn.Train(training_data, 0.05);
#endregion

Console.WriteLine("info: test results");
#region test and generate results
foreach (var data in training_data)
{
    var outputs = nn.GetResults(data.Inputs!);
    Console.WriteLine($"\nresults: I({data.Inputs![0]} , {data.Inputs[1]}) - O({outputs[0]})");
    Console.WriteLine($"expected result: O({data.Targets![0]})");
}

Console.WriteLine("complete: neural network operations complete.");
Console.ReadKey();
#endregion


--------------------------------------------------------------------------------------------------------


global using PandasNet;
global using NumSharp;
global using Spectre.Console;
global using Console = Spectre.Console.AnsiConsole;

var inputs = new float[4]{1,2,3, 2.5F};

var weights = new List<float[]>
{
	new float[4]{0.2F, 0.8F, -0.5F, 1.0F},
	new float[4]{0.5F, -0.91F, 0.26F, -0.5F},
	new float[4]{-0.26F, -0.27F, 0.17F, 0.87F}
};

var biases = new float[]{2,3,0.5F};					
 float[] getTotalOutput()
{
	var outputs = new float[3];
	
	for (int i = 0; i < weights.Count; i++)
		outputs[i] = (float)Math.Round(np.dot(weights[i], inputs).GetDouble() + biases[i], 3);
	
	return outputs;
}
var outputs = getTotalOutput();



Console.WriteLine($"[{outputs[0]}, {outputs[1]}, {outputs[2]}]");



--------------------------------------------------------------------------------------------------------

var inputs = new float[3,4]{
	{1,2,3, 2.5f},
	{2.0f, 5.0f, -1.0f, 2.0f},
	{-1.5f, 2.7f, 3.3f, -0.8f}
};
var biases_1 = new float[]{2,3,0.5f};					

var weights_1 = new float[3,4]
{
	{0.2f, 0.8f, -0.5f, 1.0f},
	{0.5f, -0.91f, 0.26f, -0.5f},
	{-0.26f, -0.27f, 0.17f, 0.87f}
};

var weights_2 = new float[3,3]
{
	{0.1f, -0.14f, 0.5f},
	{-0.5f, 0.12f, -0.33f},
	{-0.44f, 0.73f, -0.13f}
};

var biases_2 = new float[]{-1,2,-0.5f};					

var layer_1_outputs = np.dot(inputs, np.array(weights_1).T) + biases_1;
var layer_2_outputs = np.dot(layer_1_outputs, np.array(weights_2).T) + biases_2;

Console.WriteLine($"[{layer_2_outputs}]");


--------------------------------------------------------------------------------------------------------


